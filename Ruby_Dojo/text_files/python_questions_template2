#============================================================================================================================#
# greedy method =============================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
quantifiers
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what is a greed method in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
a function or method that tries to process something as many times as possible
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
a function or method that is in an endless loop
a loop that does not end
a  function or method that is recursive	  
################################################################################
#============================================================================================================================#
# quantifiers ===============================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
quantifiers
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
which meta characters are quantifiers in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
*, +, ?, {}
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
*, +, -, %
*, +, !, {}
*, %, ^, []	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
quantifiers
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what do quantifiers do in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
indicates how many times a pattern has to occur to match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
indicates how many times to check the string for a match
indicates how many items to match in the string
indicates how many elements to find in the string	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
quantifiers
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what do should we know about using quantifiers?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we can use quantifiers with character classes
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we cannot use quantifiers inside character classes
we can only use quantifiers inside character classes
we can only use quantifiers once in regular expressions	  
################################################################################
#============================================================================================================================#
# * quantifier ==============================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what quantifier do we use to match zero or more characters in a string using
regular expressions in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
*
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
+
?
%	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the * quantifier, what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it is greedy
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it is lazy
it is hungry
it is crazy	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to go through an entire string and find the following pattern even
if the pattern overlaps with another string, check for zero or more dashes in
between the words foo and bar:

given string........................string='foo--bar'
use variable........................match_object
if match found print................'match found' (use single quote)
if match not found print............'not found' (use single quote)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('foo-*bar',string)
if match_object:
  print('match found')
else:
  print('not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to go through an entire string and find the following pattern even
if the pattern overlaps with another string, check for 0 or more numbers in
beween the words foo and bar:

given string.......................string='foo42bar'
use variable.......................match_object
if match found print...............'match found' (use single quote)
if match not found print...........'not found' (use single quote)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('foo[1-9]*bar,string)
if match_object:
  print('match found')
else:
  print('not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to go through an entire string and find the following pattern even
if the pattern overlaps with another string, check for zero or more of any 
characters in between the words foo and bar:

given string.......................string='foo $qux@grault % bar'
use variable.......................match_object
if match found print...............'match found' (use single quote)
if match not found print...........'not found' (use single quote)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('foo.*bar,string)
if match_object:
  print('match found')
else:
  print('not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
* quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check the string for a match, matching zero or more of any character
between < and > even if the string overlaps with another string. use a lazy quantifier:

given string.......................string='%<foo>,<bar>,<baz>%'
if match is found print............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes) 
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('<.*?>', string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# + quantifier ==============================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
+ quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what quantifier do we use to match one or more characters in a string using
regular expressions in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
+
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
*
?
!	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
+ quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the + quantifier, what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it is greedy
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it is lazy
it is hungry
it is crazy	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
+ quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to go through an entire string and find the following pattern even
if the pattern overlaps with another string, check for one or more occurrences
of a character in between the words foo and bar:

given string.......................string='foo--bar'
use variable.......................match_object
if match found print...............'match found' (use single quote)
if not found print.................'not found' (use single quote)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('foo-+bar',string)
if match_object:
  print('match found')
else:
  print('not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
+ quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to go through an entire string and find the following pattern even
if the pattern overlaps with another string, check for one or more occurrences
of numbers in between the words foo and bar:

given string.......................string='foo69bar'
use variable.......................match_object
if match found print...............'match found' (use single quote)
if not found print.................'not found' (use single quote)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('foo[1-9]+bar',string)
if match_object:
  print('match found')
else:
  print('not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
+ quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check the string for a match, matching one or more of any character
between < and > even if the string overlaps with another string. use a lazy quantifier:

given string.......................string='%<foo>,<bar>,<baz>%'
if match is found print............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes) 
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('<.+?>', string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# ? quantifier ==============================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what quantifier do we use to match zero or one characters in a string using
regular expressions in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
?
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
+
*
!	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the ? quantifier, what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it is greedy
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it is lazy
it is hungry
it is crazy	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check for one or no occurrance of a dash in the string, use a 
quantifier that checks for zero or one occurrances of a character. check even 
if the string overlaps with another string:

given string........................string='foobar'
use variable........................result
if match found print................'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-?bar', string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check for one or no occurrance of a dash in the string, use a 
quantifier that checks for zero or one occurrances of a character. check even 
if the string overlaps with another string:

given string........................string='foo-bar'
use variable........................result
if match found print................'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-?bar', string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check for one or no occurrance of a number in the string, use a 
quantifier that checks for zero or one occurrances of a number. check even 
if the string overlaps with another string:

given string........................string=foobar
use variable........................result
if match found print................'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo[1-9]?bar',string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
	  
write code to check for one or no occurrance of a number in the string, use a 
quantifier that checks for zero or one occurrances of a number. check even 
if the string overlaps with another string:

given string........................string=foo7bar
use variable........................result
if match found print................'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo[1-9]?bar',string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what else can we use the ? quantifier for?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
to make quantifiers non greedy
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##              
      ##========================##
to make other quantifiers even more greedy
to return true or false instead of a matching string
to add zero or one extra search pattern	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
? quantifier
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check the string for a match, matching zero or one of any character
between < and > even if the string overlaps with another string. use a lazy 
quantifier:

given string.......................string='%<b>,<a>,<z>%'
if match is found print............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes) 
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('<.??>', string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# {} meta characters ========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta characters can we use to create our own quantifier?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
{ and }
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
[ and ]
( and )
| and |	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what do we need to know when using the { and } meta characters to create our
own quantifiers?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we can provide up to two integers as parameters for our desired quantity
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we can provide up to three integers as parameters for our desired quantity
we can provide a list of integers for our desired quantity
we can provide a tuple of integers for our desired quantity 	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to check for a match in a string where we will need to provide our 
own parameter for the desired quantity check of a particular character while
checking for the match even if the string overlaps with another string:

given string........................string='x---x'
use variable........................result
check to match......................three dashes between two x
if match is found print.............'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('x-{3}x' string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what else should we know about using { and } to create our own quantifier?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it is greedy
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it is lazy
it returns true or false
it returns a reference to the original value	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the meta characters { and } to create our own quantifiers what else
can we use as a parameter other than an integer?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
a range
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
a float
a list
a dictionary	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the meta characters { and } to create our own quantifier while using
a range as the parameter, what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
the parameters are all inclusive
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
the first parameter is inclusive
the last parameter is exclusive
both the first and last parameters are exclusive	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code providing our own quantifier to search for a range of characters
in a string while checking if the match is overlapping with another string:

given string........................string='foo---bar'
use variable........................result
find................................one to three dashes between the words foo and bar
if match found print................'match found' (use single quotes)
if match not found print............'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-{1,3}bar',string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code providing our own quantifier to search for a range of characters in
a string while checking if the match is overlapping with another string. Use a
single parameter for the range:

given string.......................string='foo---bar'
use variable.......................result
find...............................zero to three dashes between foo and bar
use................................the last parameter only (3)
if match found print...............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-{,3}bar','string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code providing our own quantifier to search for a range of characters in
a string while checking if the match is overlapping with another string. Use a
single parameter for the range:

given string.......................string='foo---bar'
use variable.......................result
find...............................zero to as many dashes between foo and bar
use................................the first parameter only (0)
if match found print...............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-{0,}bar','string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code providing our own quantifier to search for a range of characters in
a string while checking if the match is overlapping with another string. Use no
parameter for the range:

given string.......................string='foo---bar'
use variable.......................result
find...............................zero to as many dashes between foo and bar
if match found print...............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('foo-{,}bar','string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the meta characters { and } to create our own quantifier, what will
make this greedy method lazy?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
? meta character
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
! meta character
* meta character
+ meta character	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
{} meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code providing our own quantifier to search for a range of characters in
a string while checking if the match is overlapping with another string. make
sure to use a lazy version of our own quantifier:

given string.......................string='aaaaaaaa'
use variable.......................result
find...............................letter 'a' 3 to 5 (find least amount)
if match found print...............'match found' (use single quotes)
if match not found print...........'match not found' (use single quotes)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('a{3,5}?',string)
if result:
  print('match found')
else:
  print('match not found')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# () meta characters ========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
how do we break up a regular expression into subexpressions or groups?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
by using the ( and ) meta characters
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
by using the { and } meta characters
by using the [ and ] meta characters
by using the | and | meta characters	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does breaking up a regular expression into groups do?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
create a single syntactic entity, capture the substring
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
create a part by part search, makes it easier to find matches
create smaller searches, becomes more efficient
create looping mechanisms, returns searches faster	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match the following while checking if the match is overlapping
with another string:

given string.......................string='foo barbarbarbar baz'
use variable.......................result
match..............................1 or more 'r'
print..............................result
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('bar+',string)
print(result)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match the following while checking if the match is overlapping
with another string:

given string.......................string='foo barbarbarbar baz'
use variable.......................result
match..............................1 or more 'bar'
print..............................result
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('(bar)+',string)
print(result)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to find a string pattern even if the string pattern overlaps with
another string. The string pattern should start with the letters (ba) and end
with a (r) or (z) and at minimum there should be 2 occurrence of the word and at
most 4 occurrence of the words and the pattern should end with at least 0 or 1 
occurrence of the word (qux):

given string................string='bazbarbazqux'
use variable................result
print.......................result
#=>.........................<re.Match object; span=(0, 12), match='bazbarbazqux'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('(ba[rz]){2,4}(qux)?',string)
print(result)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what else can we do with grouping of regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we can nest the groups
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we can list the groups in a list
we can put the groups in a dictionary
we can loop through the groups	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
() meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to find a string match even if the string overlaps another string.
the string should start with the word (foo) followed by 0 or 1 occurrence of the
word (bar) and this pattern of words can happen at least in 1 or more occurrences,
followed by a three digit number that can have a 0 or 1 occurrence:

given string.................string='foofoobar123'
use variable.................result
print........................result
#=>..........................<re.Match object; span=(0, 12), match='foofoobar123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
result=re.search('(foo(bar)?)+(\d\d\d)?',string)
print(result)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# group() and groups() function =============================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
once we get a match object from a regular expression in python, how do we capture
a group from the match object?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
by using either group(), group(0), or groups
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
by using either group(), group(1), or groups(0)
by using either group(0) or groups(0)
by using either group or groups	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match a string while checking if the string is overlapping with
another string. the string to match are three separate words. after getting the
match object we must extract the captured group from the match object as a
tuple but do not use the group() or group(0) functions:

given string.......................string='foo,quuz,bar'
use variables......................match_object, captured_group
print..............................captured_group
#=>................................('foo', 'quuz', 'bar')
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(\w+),(\w+),(\w+)',string)
captured_group=match_object.groups()
print(captured_group)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match a string while checking if the string is overlapping with
another string. the string to match are three separate words. after getting the
match object we must extract the first item from the match object:

given string.......................string='foo,quuz,bar'
use variables......................match_object, first_item
print..............................first_item
#=>................................foo
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(\w+),(\w+),(\w+)',string)
first_item=match_object.group(1)
print(first_item)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match a string while checking if the string is overlapping with
another string. the string to match are three separate words. after getting the
match object we must extract the third item from the match object:

given string.......................string='foo,quuz,bar'
use variables......................match_object, third_item
print..............................third_item
#=>................................bar
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(\w+),(\w+),(\w+)',string)
third_item=match_object.group(3)
print(third_item)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the group() function to capture a group from a match object, what does
the group() function return?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
parameter zero returns a tuple, otherwise the parameter returns an item
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
parameter zero returns the first item and so forth
parameter one returns all the items in the group
no parameter returns nothing	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the groups() function to capture a group from a match object, what
does the groups() function return?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
a tuple of all the captured items
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
a list of all the captured items
a dictionary of all the captured items
a string of all the captured items	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using both the group() and groups() functions in python regular expressions
what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
they both only work on match objects
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
they can extract groups out of a regular expression
they capture groups from a regular expression
they can capture items from a regular expression	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the group() function in python regular expressions what should we
watch out for?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
group() functions can take parameters
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
group() functions do not take parameters
group() functions returns only a tuple
group() functions only returns a string	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the group() function in python regular expressions, what else
should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we can print the captured items in the order we choose
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we can only print the items in the order that they were captured
we cannot print the items individually
we cannot print all the items at once	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to match a string while checking to see if a string is overlapping
with another string. match three words then extracting the items from a match 
object and printing them in the following order:

given string.......................string='foo,quuz,bar'
use variables......................match_object, item1, item2, item3
print in order.....................item3, item2, item1
#=>................................bar quuz foo
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(\w+),(\w+),(\w+)',string)
item1=match_object.group(1)
item2=match_object.group(2)
item3=match_object.group(3)
print(item3, item2, item1)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
We know we can access a captured groups using the group() function with a parameter
from 1 to 99, in any order we want, but what else can we access using the group()
function?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
symbolically named captured groups
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
variables containing the captured groups
lists containing the captured groups
dictionaries containing the captured groups	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
group() and groups() functions
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to capture a group using symbolically named groups while checking to
see if the string pattern to be matched is overlapping with another string. use
group to print out the named groups:

given string.......................string='foo,doo,daa'
use variable.......................match_object
use named groups...................g1,g2,g3
print..............................g1,g2,g3
#=>................................
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(?P<g1>\w+),(?P<g2>\w+),(?P<g3>\w+)',string)
print(match_object.group('g1','g2','g3'))
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# \<N> meta characters ======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta characters do we use to get a back reference in python regular
expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
\<N>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<N>\
?=<N>\
?=\<N>	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the \<N> to get a back reference match in python regular expressions,
what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we have to use a raw string other wise use \\<N>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we don't have to use a raw string
we have to use the integers 0-100 other wise we get an exception
we can use negative integers to check the last groups	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the \<N> to get a back reference match in python regular expressions,
what should we watch out for?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
only the intergers 1-99 are usable other wise it is interpreted as octal numbers
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
only even integers can be used
only odd integers can be used
integers from 0-100 can be used	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using back reference with python regular expressions what should we
remember?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it matches the next item with the previous item
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it can match any of the items with previously captured items
it can match any item in what ever order
it can match only the first two items	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to gather all the words that have duplicates in the string and put
the duplicated words in a list. Use regular expression back reference to do this:

given string.......................string='foo,fio,fio,boo,boo,foo'
use variable.......................match_object
print..............................match_object
#=>................................['boo', 'fio', 'foo']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
string=string.split(',')
string.sort()
string=','.join(string)
match_object=re.findall(r'(\w+),\1+',string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
\<N> meta characters
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to gather all the letters that have duplicates in the string and put
the duplicate letters in a list. Use regular expression back reference to do this:

given string.......................string='kochensparger'
use variable.......................match_object
print..............................match_object
#=>................................['e', 'r']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
string=list(string)
string.sort()
string=''.join(string)
match_object=re.findall(r'(\w)\1', string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?P<name>regex) ===========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
how do we capture groups giving them symbolic names for later access?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?=regex)
(?<!regex)
(?#...)  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when accessing symbolically named groups that we captured what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
we can access symbolically named captured groups using indices and their names
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
we can only access symbolically named captured groups by their names
we cannot use indices to access symbolically named capture groups
we can use a loop to access symbolically named capture groups	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when accessing symbolically named groups that we captured what should we know
about accessing the groups using the symbolic name?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
the symbolic name must be represented as strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
the symbolic name is used as a variable
the symbolic name is a list
the symbolic name is a dictionary	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when capturing named groups with python regular expressions what syntax do
we use?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?P<name>regex)
(?P<name>,regex)
(?P,<name>,regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to capture the following pattern while checking for matches that
overlap with another string, getting the first match. Use a symbolic name to
name the captured items then print out the captured group as a tuple:

given string............string='foo,quux,baz'
use variable............match_object
use symbolic names......w1,w2,w3
print as tuple..........match_object
#=>.....................('foo', 'quux', 'baz')	
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(?P<w1>\w+),(?P<w2>\w+),(?P<w3>\w+)',string)
print(match_object.groups())
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to capture the following pattern while checking for matches that
overlap with another string, getting the first match. Use a symbolic name to
name the captured items then print out the captured group using their indices:

given string.............string='foo,quxx,baz'
use variable.............match_object
use symbolic names.......w1,w2,w3
print....................using indices (print in order)
#=>......................('foo', 'quux', 'baz')
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(?P<w1>\w+),(?P<w2>\w+),(?P<w3>\w+)',string)
print(match_object.group(1,2,3))
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?P<name>regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to capture the following pattern while checking for matches that	
overlap with another string, getting the first match. Use a symbolic name to 
name the captured items then print out the captured group using their symbolic 
names do not use back reference:	
	
given string....................string='foo,quux,baz'	
use variable....................match_object	
use symbolic names..............w1, w2, w3	
access as print by name.........w1, w2, w3
#=>.............................('foo', 'quux', 'baz')	
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(P?<w1>\w+),(P?<w2>\w+),(P?<w3>\w+)',string)
print(match_object.group('w1','w2','w3'))
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?:regex) =================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?:regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what regular expressions meta characters do we use to match a non capturing
group in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?:regular_expression)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?P<group_name>regex)
(?=regex)
(?!regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?:regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when using non capturing groups in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
the non captured groups is not accessible
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
the non captured group is accessible using the 0 parameter
the non captured group is accessible using the 100 parameter
the non captured group is accessible using the symbolic name None	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?:regex)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to capture the first and third item in a string while checking if the
match is overlapping with another string:

given string.......................string='rum,dee,roo'
use variable.......................match_object
use group names....................q1,q3
match..............................first and third item
print..............................q1,q3
#=>................................
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_object=re.search('(?P<q1>\w+),(?:\w+),(?P<q3>\w+)',string)
print(match_object.group('q1','q3')
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (yes_condition|no_condition) ==============================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(yes_condition|no_condition)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character do we use to get a conditional match in python regular 
expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(yes_condition|no_condition)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(yes_condition & no_condition)
(yes_condition + no_condition)
(yes_condition : no_condition)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(yes_condition|no_condition)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to conditionally check for a match pattern against a string that will
match with one condition or the other while checking if the match pattern is
overlapping with another string thus returning the first match found. Be sure to 
concentrate the match at the beginning of the pattern and use a raw string:

given string.......................string='###bar'
use variables......................match_pattern, match_object
1) capture.........................(0 to 1 occurrance of '###')
2) if captured.....................match directly after 'bar'
3) else............................match with 'baz'
print..............................match_object
#=>................................<re.Match object; span=(0, 6), match='###bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_pattern=r'^(###)?(?(1)bar|baz)'
match_object=re.search(match_pattern,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(yes_condition|no_condition)
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to conditionally check for a match pattern against a string that will
match with one condition or the other while checking if the match pattern is
overlapping with another string thus returning the first match found. Be sure to 
concentrate the match at the beginning of the pattern and use a raw string:

given string.......................string='baz'
use variables......................match_pattern, match_object
1) capture.........................(0 to 1 occurrance of '###')
2) if captured.....................match directly after 'bar'
3) else............................match with 'baz'
print..............................match_object
#=>................................<re.Match object; span=(0, 3), match='baz'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_pattern=r'^(###)?(?(1)bar|baz)'
match_object=re.search(match_pattern,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?=regex) =================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character pattern do we use to get a pattern match using a lookahead
positive assertion in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?=regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?!regex)
(?<=regex)
(?=regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does a lookahead positive assertion do in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
asserts that to the right of the current location is a match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
asserts that to the left of the current location is a match
asserts that to the right of the current location is not a match
asserts that to the left of the current location is not a match
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when using a lookahead positive assertion in python
regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
if a match is found the item to the right of the current location is not included
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
everything is matched with the lookahead positive assertion
just the item to the right of the current location is matched
a True is returned if a match is found
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what will the following code return as a match object:

import re
string='foobar'
match_pattern='foo(?=[a-z])'
match_object=re.search(match_pattern, string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(0, 3), match='foo'>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(0, 3), match='foob'>
<re.Match object; span=(0, 3), match='fooba'>
<re.Match object; span=(0, 3), match='foobar'>
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using a lookahead positive assertion to get a match for the following:

given string.......................string='foobar'
use variables......................match_pattern, match_object
1) after 'foo'.....................match a lowercase letter
print..............................match_object
#=>................................<re.Match object; span=(0, 3), match='foo'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_pattern='foo(?=[a-z])'
match_object=re.search(match_pattern, string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?!regex) =================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character pattern do we use to get a pattern match using a lookahead
negative assertion in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?!regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?=regex)
(?<=regex)
(?!regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does a lookahead negative assertion do in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
asserts that to the right of the current location is not a match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
asserts that to the left of the current location is a not a match
asserts that to the right of the current location is a match
asserts that to the left of the current location is a match	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when using a lookahead negative assertion in python
regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
if a match is found the item to the right of the current location is not included
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
everything is matched with the lookahead negative assertion
just the item to the right of the current location is matched
a False is returned if a match is found	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what will the following code return as a match object:

import re
string='foo123'
match_pattern='foo(?![a-z])'
match_object=re.search(match_pattern,string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(0, 3), match='foo'>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(0, 3), match='foo1'>
<re.Match object; span=(0, 3), match='foo12'>
<re.Match object; span=(0, 3), match='foo123'>	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?!<regex>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using a lookahead negative assertion to get a match for the following:

given string.......................string='foo123'
use variables......................match_pattern, match_object
1) after 'foo'.....................match a lowercase letter
print..............................match_object
#=>................................<re.Match object; span=(0, 3), match='foo'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_pattern='foo(?![a-z])'
match_object=re.search(match_pattern,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?<=regex) ================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character pattern do we use to get a pattern match using a lookbehind
positive assertion?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?<=regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?=regex)
(?!regex)
(?P<name>regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does a lookbehind positive assertion do in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it asserts what is behind to the left of the current location must match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it asserts what is behind to the right of the current location must match
it asserts what is behind to the left of the current location must not match
it asserts what is behine to the right of the current location must not match	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when using a lookbehind positive assertion in python
regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
the previous match is not returned with the match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
the previous match is returned with the match
the previous match is returned but not the match
neither the previous match or the actual match is returned	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what will the following code return as a match object?

import re
string='foobar'
match_pattern='(?<=foo)bar'
match_object=re.search(match_pattern,string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(3, 6), match='bar'>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<re.Match object; span(0, 6), match='foobar'>
<re.Match object; span(0, 3), match='foo'>
None	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we watch out for when using a lookbehind positive assertion in
python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
lookbehind positive assertions cannot have open ended lengths, must be finite
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
lookbehind positive assertions must have open ended lengths
lookbehind positive assertions can have open ended lengths
lookbehind positive assertions have no length restrictions	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using a lookbehind positive assertion while checking for the match
string to be a part of another string for the following:

given string..................string='foobar'
use variables.................match_string, match_object
check for.....................foo before bar
print.........................match_object
#=>...........................<re.Match object; span=(3,6), match='bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(?<=foo)bar'
match_object=re.search(match_string, string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<=regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
7) write code using a lookbehind positive assertion while checking for	
the match string to be a part of another string for the following:	
	
given string..................string='aaadef'	
use variables.................match_string, match_object	
check for.....................three a's before the word def	
print.........................match_string	
#=>...........................<re.Match object; span=(3,6), match='def'>	
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(?<=a{3})def'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?<!regex) ================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character pattern do we use to get a pattern match using a lookbehind
negative assertion?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?<!regex)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?<=regex)
(?=regex)
(?!regex)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does a lookbehind negative assertion do in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it asserts what is behind to the left of the current location must not match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it asserts what is behind to the right of the current location must not match
it asserts what is behind to the left of the current location must match
it asserts what is behind to the right of the current location must match	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when using a lookbehind negative assertion in python
regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
the previous match is not returned with the match
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
the previous match is returned with the match
only the previous match is returned
neither the previous nor the current match is returned	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what will the following code return as a match object?

import re
string='foobar'
match_string='(?<!foo)bar'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
<re.Match object; span=(3,6), match='bar'>
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<re.Match object; span(0,6), match='foobar'>
<re.Match object; span(0,3), match='foo'>
None	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we watch out for when using a lookbehind negative assertion?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
lookbehind negative assertions cannot have open ended lengths, must be finite
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
lookbehind negative assertions can have open ended lengths
lookbehind negative assertions do not have any limitations
lookbehind negative assertions must have open ended lengths	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?<!regex) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
6) write code using a lookbehind negative assertion while checking for the
match string as being part of another string pattern:

given string.....................string='foobar'
use variables....................match_string, match_object
use string.......................qux (to not match)
check for........................no match before word bar
print............................match_object
#=>..............................re.Match object' span(3,6), match='bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(?<!qux)bar'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?#...) ===================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?#...) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta character pattern do we use to comment our regular expressions
in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?#...)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?<=...)
(?=...)
(?!...)	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?#...) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to search for the word bar followed by either 0 or 1 number of
spaces before the word baz, search for this pattern even if the pattern is
overlapping with another string pattern. Comment out the match string:

given string.................string='foo bar baz qux'
use variables................match_string, match_object
use comment..................'this is my comment'
print........................match_object
#=>..........................<re.Match object; span(4,11), match='bar baz'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='bar(?# this is my comment) *baz'
match_object=re.search(match_string,string)
print(match_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (alt1|alt2|alt<N>) ========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what meta characters can we use in python regular expressions to specify
alternatives for matching?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(alt1|alt2|alt<N>)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(alt1|alt2)
[alt1|alt2|alt<n>]	
alt1|alt2|alt<N>  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what should we know when we are using alternatives in python regular
expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
alternatives are non greedy and returns the first match found
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
alternatives are non greedy and returns the last match found
alternatives are greedy and returns the largest match found
alternatives are greedy and returns all the matches found	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code combining alternatives and one or more occurrences of a word, while
checking to see if the match pattern is overlapping with another pattern:

given string..............string='foofoofoo'
use variables.............match_string, match_object
check for.................foo,bar or baz (1 or more occurrences)
print.....................match_object
#=>.......................<re.Match object; span=(0,9), match='foofoofoo'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import
match_string='(foo|bar|baz)+'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using alternatives, while checking to see if the match pattern	
is overlapping with another pattern:	
	
given string.................string='bar'	
use variables................match_string, match_object	
check for....................either bar, baz or foo	
print........................match_object	
#=>..........................<re.Match object; span=(0, 3), match='bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(bar|baz|foo)'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code combining alternatives and one or more occurrence of a word, while
checking to see if the match pattern is overlapping with another pattern:

given string.........string='bazbazbazbaz'
use variables........match_string, match_object
check for............bar, baz or foo (1 or more occurrences)
print................match_object
#=>..................<re.Match object; span=(0, 12), match='bazbazbazbaz'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(foo|bar|baz)+'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code combining alternatives, ranges, and one or more occurrences of
numbers and letters, while checking to see if the match pattern is overlapping
with another pattern:

given string.............string='456'
use variables............match_string, match_object
check for................range of numbers 0-9 (1 or more occurrences)
                         or range of letters a-f (1 or more occurrences)
print....................match_object
#=>......................<re.Match object; span=(0, 3), match='456'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='[0-9]+|[a-f]+'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(alt1|alt2|alt<N>) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code combining alternatices, ranges and one or more occurrences of
numbers and letters, while checking to see if the pattern is overlapping with
another pattern:

given string...............string='ffda'
use variables..............match_string, match_object
check for..................range of numbers 0-9 (1 or more occurrences)
                           or range of letters a-f (1 or more occurrences)
print......................match_object
#=>........................<re.Match object; span=(0, 4), match='ffda'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='[0-9]+|[a-f]+'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.I or re.IGNORECASE =====================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.i or re.IGNORECASE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
By default regular expressions are case sensitive, what flag do we use to make
our regular expression case insensitive?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.I or re.IGNORECASE
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.I or re.INSENSITIVE
re.C or re.CASEIGNORE
re.D or re.DUALCASE	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.I or re.IGNORECASE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the single letter flag to make the regular expression case
insensitive, while searching for the first match even if the match string is
overlapping with another string:

given string................string='aaaAAA'
use variables...............match_string, match_object, flag
match string................match lower case a (1 to more occurrences)
use flag....................single letter for case insensitive
print.......................match_object
#=>.........................<re.Match object; span=(0, 6), match='aaaAAA'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='a+'
flag=re.I
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.I or re.IGNORECASE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the whole word flag to make the regular expression case
insensitive, while searching for the first match even if the match string is
overlapping with another string:

given string................string='aaaAAA'
use variables...............match_string, match_object, flag
match string................match upper case A (1 to more occurrences)
use flag....................for case insensitive (whole word)
print.......................match_object
#=>.........................<re.Match object; span=(0, 6), match='aaaAAA'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='A+'
flag=re.IGNORECASE
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.M or re.MULTILINE ======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.M or re.MULTILINE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
By default ^ (start of string) and $ (end of string) match only at the beginning
and end of the search string. If a string has embedded new lines we can think of 
it as a multiline string. Which flag should we use to enable a regular expression 
to search through a multiline string:
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.M or re.MULTILINE
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.M or re.MULTIPLELINE
re.M or re.MANYLINE
re.P or re.PARAGRAPH	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.M or re.MULTILINE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the single letter flag to make the regular expression check
a multiline string, while searching for the first match even if the match
string is overlapping with another string:

given string..................string='foo\nbar\nbaz'
use variables.................match_string, match_object, flag
match string..................the word bar at the beginning of the line
use flag......................single letter for multiline
print.........................match_object
#=>...........................<re.Match object; span=(4, 7), match='bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='^bar'
flag=re.M
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.M or re.MULTILINE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the whole word flag to make the regular expression check a
multiline string, while searching for the first match even if the match string
is overlapping with another string:

given string.................string='foo\nbar\nbaz'
use variables................match_string, match_object, flag
match string.................the word bar at the end of the line
use flag.....................for multiline (whole word)
print........................match_object
#=>..........................<re.Match object; span=(4, 7), match='bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='bar$'
flag=re.MULTILINE
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.M or re.MULTILINE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the multiline flag what should we know?

      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it does not work with \A and \Z anchors
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it does not work with ^ and $ anchors
it does not work with any anchors
it works with all anchors	  
################################################################################
#============================================================================================================================#
# re.S or re.DOTALL =========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.S or re.DOTALL 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
by default the dot '.' metacharacter matches all characters except the newline
character. What flag can we use to get our regular expression to also match
the newline character when using the dot metacharacter?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.S or re.DOTALL
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.D or re.DOTALL
re.I or re.INCLUDEALL
re.N or re.NEWLINE
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.S or re.DOTALL 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the single letter flag to make the regular expression using
the dot meta character to include newlines in the search, while searching for
the first match even if the match string is overlapping with another string:

given string.........string='foo\nbar''
use variables........match_string, match_object, flag
match_string.........check for the words foo (then a wild card) bar
use flag.............single letter to include newlines with dot meta character
print................match_object
#=>..................<re.Match object; span=(0, 7), match='foo\nbar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='foo.bar'
flag=re.S
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.S or re.DOTALL 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the whole word flag to make the regular expression using the 
dot meta character to include newlines in the search, while searching for the 
first match even if the match string is overlapping with another string:

given string......string='foo\nbar'
use variables.....match_string, match_object, flag
match_string......check for the words foo (then a wild card) bar
use flag..........(whole word) to include newlines when using dot metacharacter
print.............match_object
#=>...............<re.Match object; span=(0, 7), match='foo\nbar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='foo.bar'
flag=re.DOTALL
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.X or re.VERBOSE ========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
by default regular expressions are written in one line but when we have code
that looks like this: r'^(\(\d{3}\))?\s*d{3}[-.]\d{4}$' well then it could be a
little too much to read! What flag can we use to allow us to make a multiline
regular expression where we can put comments in it?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.X or re.VERBOSE
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.C or re.COMMENTS
re.V or re.VERBOSE
re.M or re.MULTILINE
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
the verbose flag specifies a few special behaviors in python regular
expressions one is regarding white space:
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
ignores all white space unless in a character class or escaped with a backslash
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
ignores all white space unless in a character class  
ignores all white space unless escaped with a backslash
ignores all white space
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
the verbose flag specifies a few special behaviors in python regular
expressions one is regarding the # metacharacter
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
ignores # and everything after it unless placed in a character class or escaped
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
ignores # and everything after it unless placed in a character class
ignores # and everything after it unless escaped with a backslash 
ignores # and everything after it
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the verbose flag in our regular expressions what should we watch
out for?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
watch out for spaces we intend to matter in the search
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
watch out for the number of spaces we use
watch out for the placement of the spaces
watch out for using too many spaces
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
given the string 'foo bar' where the space in between is significant, write a
match string that we can use with the VERBOSE flag to get a match while getting
the first match and checking if the match string is overlapping with another
string

given string.............string='foo bar'
write....................match string
#=>......................<re.Match object; span=(0,7), match='foo bar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
'foo[ ]bar'
'foo\ bar'
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test3
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.X or re.VERBOSE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the VERBOSE flag so we can put comments in our regular 
expression while finding the first match even if the match is overlapping with 
another string:

given strings............string1='414.9229'
                         string2='414-9229'
                         string3='(712)414-9229'
                         string4='(712) 414-9229'
match_string spacing.....5 spaces to regex, 17 spaces to comment
use variables............match_string (1-4), match_object (1-4), flag(1-2)
use flag.................flag1 first two (whole word flag) to add comments
                         flag 2 last two (single letter flag) to add comments
print....................match_object (1-4)
#=>......................<re.Match object; span=(0-8), match='414.9229'>
                         <re.Match object; span=(0-8), match='414-9229'>
                         <re.Match object; span=(0-13), match='(712)414-9229'>
                         <re.Match object; span=(0-14), match='(712) 414-9229'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re                            
match_string='''    ^                # start of string (anchor)
                    (\(\d{3}\))?     # zero or one 3 digit (area code)
                    \s*              # zero or more spaces
                    \d{3}            # 3 digit number (prefix)
                    [-.]             # dot or dash (separator)
                    \d{4}            # 4 digit (line number)
                    $                # end of string (anchor)
             '''
flag1=re.VERBOSE
flag2=re.X
match_object1=re.search(match_string,string1,flag1)
match_object2=re.search(match_string,string2,flag1)
match_object3=re.search(match_string,string3,flag2)
match_object4=re.search(match_string,string4,flag2)
print(match_object1)
print(match_object2)
print(match_object3)
print(match_object4)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.DEBUG ==================================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.DEBUG 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what flag do we use to troubleshoot our regular expressions in python?
python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.DEBUG
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.D or re.DEBUG
re.T or re.TROUBLESHOOT
re.P or re.PARSE
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.DEBUG 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
2) write code to perform a match look up in python regular expressions
while checking for the first match found and making sure that it is not
overlapping with another string. Use a flag to preform a troubleshoot to
see how the parser is interpreting our regular expression:

given string........string='fooxbar'
use variables.......match_string, match_object, flag
match_string........match words foo and bar and single character in between 
print...............match_object
#=>.................#  LITERAL 102
                    #  LITERAL 111
                    #  LITERAL 111
                    #  ANY None
                    #  LITERAL 98
                    #  LITERAL 97
                    #  LITERAL 114
                    #
                    #  0. INFO 12 0b1 7 7 (to 13)
                    #       prefix_skip 3
                    #       prefix [0x66, 0x6f, 0x6f] ('foo')
                    #       overlap [0, 0, 0]
                    # 13: LITERAL 0x66 ('f')
                    # 15. LITERAL 0x6f ('o')
                    # 17. LITERAL 0x6f ('o')
                    # 19. ANY
                    # 20. LITERAL 0x62 ('b')
                    # 22. LITERAL 0x61 ('a')
                    # 24. LITERAL 0x72 ('r')
                    # 26. SUCCESS
                    # <re.Match object; span=(0, 7), match='fooxbar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='foo.bar'
flag=re.DEBUG
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.A or re.ASCII, re.U or re.UNICODE, re.L or re.LOCALE ===================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what flags can we use in python regular expressions to change the character
encoding?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L OR re.LOCALE
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.T OR re.TEXT
re.A or re.ATASCII, re.U or re.UNICODE, re.T OR re.LOCALE
re.A or re.ASCII, re.U or re.UNVERSAL, re.L OR re.LOCALE
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using encoding in python regular expressions what should we know about 
ASCII and LOCALE when UNICODE should have all the characters needed to handle 
any characters from other languages as well as English?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
they are available for special circumstances
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
they are available for new languages
they are available for characters with special meaning
they are available for certain keyboard setups
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using the encoding flag to correctly search through a match string 
that contains the German word for pretty, 'schön', and find the first match 
while checking for overlapping matches with other strings:

given string..............string='sch\u00f6n'
use variables.............match_string, match_object(1-2), flag
match_strings.............match word characters (1 or more occurrences)
                          match_string1 (no flag)
                          match_string2 (flag)
print.....................match_objects
#=>.......................<re.Match object; span=(0,5), match='schön'>
                          <re.Match object; span=(0,5), match='schön'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='\w+'
flag=re.UNICODE
match_object1=re.search(match_string,string)
match_object2=re.search(match_string,string,flag)
print(match_object1)
print(match_object2)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what is the default python encoding set to?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
UTF-8 or UNICODE
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
ASCII
LOCALE
TEXT
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does the 8 stand for in UTF-8?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
8 bit
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
8th set
8 characters
8 length
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.A or re.ASCII, re.U or re.UNICODE, re.L or re,LOCALE 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what other UTFs are there that is less frequently used?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
UTF-16 and UTF-32
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
UTF-9 and UTF-10
UTF-17 and UTF 64
UTF-20 and UTF-22
################################################################################
#============================================================================================================================#
# | metacharacter ===========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
| metacharacter 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what metacharacter do we use to combine flags in a python regular expression?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
|
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
&
+
;
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
| metacharacter 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using multiple flags to search for the first match even if the
match is overlapping with another string pattern:

given string.................string='FOO\nBAR\nBAZ'
use variables................match_string, match_object, flag (1-2)
match_string.................anchored to the beginning match the word bar
flag1........................case insensitive (whole word)
flag2........................more than one line (whole word)
print........................match_object
#=>..........................<re.Match object; span=(4,7), match='BAR'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='^bar'
flag1=re.IGNORECASE
flag2=re.MULTILINE
match_object=re.search(match_string,string,flag1|flag2)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?flag)regex or regex(?flag) ==============================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?flag(s)) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
there is another way to set flags in a regular expression that will allow us to
group it within the expression later on. What meta characters do we use to do
this?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?flag(s)) (using single lowercase letters for flag)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?flag) (using single uppercase letters for flag)
(?>flag | flags) (using single lowercase letters for flag)
(?=flag(s)) (using single uppercase letters for flag)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?:flag(s)) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when grouping flags in a python regular expression, which syntax is correct 
(Assume we are using the small i for IGNORECASE and the small m for MULTILINE)?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
'(?im)^bar' or '^bar(?im)'
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
'(?i|m)^bar' or '^bar(?i|m)'
'((?im)^bar)' or '((^bar(?im)))'
'(^bar)?i|m or ?i|m(^bar)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?flag(s)) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
Given the partial program below, write code to match_string using flags to 
check both lower and uppercase characters and check multiline strings:	
	
given program................import re	
                             string='FOO\nBAR\nBAZ'	
                             match_string=__________	
                             match_object=re.search(match_string,string)	
                             print(match_string)	
#=>..........................<re.Match object; span(4,7), match='BAR'>	
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
'(?im)^bar'
'^bar(?im)'
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test3
################################################################################
#============================================================================================================================#
# (?flag(s):part of match_string) ===========================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?flag(s):part of match_string) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what syntax do we use to group our flags with a certain part of the regular 
expression so that it pretains only to that part?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?flag(s):part of match_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?flag|flags:part of match_string)
(?flag(s);part of match_string)
(?flag(s)=part of match_string)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?flag(s):part of match_string) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to group the flag with a certain part of a regular expression while 
searching for the first match even if it is overlapping with another string 
pattern:

given string.............string='FOObar'
use variables............match_string, match_object
match_string.............group flag to ignore the case with foo
                         followed by the word bar
print....................match_object
#=>......................<re.Match object; span=(0,6), match='FOObar'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(?i:foo)bar'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# (?-flag(s):part of match_string) ==========================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?-flag(s):part of match_string) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when we group our flags with our regular expression in python we can turn off
the flag in that group. What syntax do we use to do this?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
(?-flag(s):part of match_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
(?<flag(s):part of match_string)
(?>flag(s);part of match_string)
(?=flag(s)=part of match_string)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
(?-flag(s):part of match_string) 
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to group the flag with a certain part of a regular expression while
turning off the flag for that group and searching for the first match even if
it is overlapping with another string pattern:

given string...................string='FOOBAR'
use variables..................match_string, match_object,flag
match_string...................turn off IGNORECASE with foo
                               followed by bar
flag...........................use flag IGNORECASE 
print..........................match_object
#=>............................None
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='(?-i:foo)bar'
flag=re.IGNORECASE
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.search() function ======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions, which function do we use to scan a string for
the first match while being able to scan multilines?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.match() function
re.fullmatch() function
re.findall() function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.search() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
searching function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
substitution function
utility function
formatting function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.search() function in python regular expressions what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it also works with multiline strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it only works with multiline strings
it only works with single line strings
it also works with lists	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for a match, finding the first match even if it
overlaps with another string pattern:

given string.......................string='foo123bar'
use variables......................match_string, match_object
match_object.......................scan for numbers (1 or more)(raw string)
print..............................match_object
#=>................................<re.Match object; span=(3, 6), match='123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'(\d+)'
match_object=re.search(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.search() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for a match, finding the first match even if it
overlaps with another string pattern:

given string.......................string='123FOO456'
use variables......................match_string, match_obect, flag
match_string.......................lowercase letters (1 or more) (raw string)
flag...............................make case insensitive (whole word)
print..............................match_object
#=>................................<re.Match object; span=(3, 6), match='FOO'>

      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'[a-z]+'
flag=re.IGNORECASE
match_object=re.search(match_string,string,flag)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.match() function =======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions, which function do we use to scan for a match
at the begining of a string?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.search() function
re.finciter() function
re.matchall() function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.match() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
searching function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
substitution function
utility function
formatting function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.match() function in python regular expressions what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it only works with single line strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it only works with multiline strings
it works with both single and multiline strings
it works also with lists	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for a match at the begining of the string, finding 
a match even if it overlaps with another string pattern:

given string.......................string='123foobar'
use variables......................match_string, match_object
match_string.......................scan for number (1 or more) (raw string)
print..............................match_object
#=>................................<re.Match object; span=(0, 3), match='123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\d+'
match_object=re.match(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.match() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in the following program which string will re.match() find a match with?

import re
match_string=r'\d+'
match_object=re.match(match_string,string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
123foobar
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
foo123bar
foobar123
bar123foo	  
################################################################################
#============================================================================================================================#
# re.fullmatch() function ===================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions, which function do we use to scan through an
an entire string for an exact match but does not match if overlaping with
another string pattern?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.search() function
re.match() function
re.findall() function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.match() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
searching function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
substitution function
utility function
formatting function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.fullmatch() function in python regular expressions what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
only works with single line strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
only works with multiline strings
works with both multiline and single line strings
works with lists	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for an exact match:

given string.......................string='123'
use variables......................match_string, match_object
match_string.......................numbers (1 or more) (raw string)
print..............................match_object
#=>................................<re.Match object; span=(0, 3), match='123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\d+'
match_object=re.fullmatch(match_string',string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.fullmatch() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in the following program which string will re.fullmatch() find a match with?

import re
match_string=r'\d+'
match_object=re.fullmatch(match_string',string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
123
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
123foobar
foo123bar
foo123bar	  
################################################################################
#============================================================================================================================#
# re.findall() function =====================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions, which function do we use to scan through an
an entire string for all matches even if the matches overlap with another
string pattern returning a list of all matches found?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.search() function
re.match() function
re.finditer()	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.findall() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
searching function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
substitution function
utility function
formatting function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.findall() function in python regular expressions what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
works with both single line and multiline strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
works with only multiline strings
works with only single line strings
works with dictionaries	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for all matches found even if there is an overlap
with another string pattern and return the matches as a list:

given string.......................string='...foo,,,bar...barbel:%$baz//|'
use variables......................match_string, match_object
match_string.......................find word characters (1 or more)(raw string)
print..............................match_object
#=>................................['foo', 'bar', 'barbel', 'baz']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='r'\w+'
match_object=re.findall(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in the following program which which will be returned as the match?

import re
string='barbel barbwire barstoke barbra stubar'
match_string='r'bar'
match_object=re.findall(match_string,string)
print(match_object)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
bar bar bar bar bar 
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
barbel barbwire barstoke barbra stubar	
barbel barbwire barstoke barbra
stubar  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for all matches even if there is an overlap with
another string pattern and return all matches as a list of tuples with two
matches per tuple:

given string..............string='foo,bar,baz,qux,quux,corge'
use variables.............match_string, match_object
match object..............find two items. both word characters (1 or more)
                          (use raw string)
print.....................match_object
#=>.......................[('foo', 'bar'), ('baz', 'qux'), ('quux', 'corge')]
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'(\w+),(\w+)'
match_object=re.findall(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.findall() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for all matches even if there is an overlap with
another string pattern and return all matches as a list of tuples with three
matches per tuple:

given string..............string='foo,bar,baz,qux,quux,corge'
use variables.............match_string, match_object
match object..............find three items. all word characters (1 or more)
                          (use raw string)
print.....................match_object
#=>.......................[('foo', 'bar', 'baz'), ('qux', 'quux', 'corge')]
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'(\w+),(\w+),(\w+)'
match_object=re.findall(match_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.finditer() function ====================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.finditer() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions, which function do we use to scan through an
an entire string for all matches even if the matches overlap with another
string pattern returning an object that can be iterated over?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.finditer() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.search() function
re.match() function
re.findall() function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.finditer() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.finditer() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
searching function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
substitution function
utility function
formatting function	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.finditer() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.finditer() function in python regular expressions what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
works with both single and multiline strings
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
works only with single line strings
works only with multiline strings
works with dictionaries	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.finditer() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan a string for all matches found even if there is an overlap
with another string pattern and return the matches as an iterable object. Then
use a for loop to print out the captured match objects:

given string......................string='...foo,,,bar:%&baz//|'
use variables.....................match_string, match_object, item
match_string......................word character (1 or more) (raw string)
#=>...............................<re.Match object; span=(3, 6), match='foo'>
                                  <re.Match object; span=(10, 13), match='bar'>
                                  <re.Match object; span=(16, 19), match='baz'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\w+'
match_object=re.finditer(match_string,string)
for item in match_object:
  print(item)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.sub() function =========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
in python regular expressions which function do we use to scan through a 
string for a match even if the match string is overlapping with another string 
pattern then substitute it with another string pattern by creating a new 
string pattern?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.subn() function
re.gsub() function
re.gsubn() function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.sub() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
substitution function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
searching function
utility function
formatting function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using re.sub() function in python regular expressions what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it creates a new string
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it modifies to the original string
it returns a copy of the original string
it returns a reference to the string
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function in python regular expressions, it can take up
to five parameters inside the parentheses. What goes in the first parameter?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
regex (match string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
replacement string
string
index numbers
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function in python regular expressions, it can take up
to five parameters inside the parentheses. What goes in the second parameter?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
replacement string
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
regex (match string)
string
index numbers
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function in python regular expressions, it can up to
five parameters inside the parentheses. What goes in the third parameter?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
string
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
replacement string
regex (match string)
index numbers
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function in python regular expressions, it can up to
five parameters inside the parentheses. What goes in the fourth parameter?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
count
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
string
replacement string
regex (match string)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function what does the count parameter do?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it limits the number of substitutions preformed
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it limits the number of matches checked
it limits the length of the string scanned
it limits the number of characters
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the re.sub() function and we want to use the counter parameter, 
what can we do to make it more understandable than just putting an integer 
in that space?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
count=integer
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
count:integer
count(integer)
integer.count
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string scanning for the 1 or more occurrence
of numbers even if the numbers are overlapping with another string pattern,
replacing them with '#' then returning a new string with the new pattern:	  

given string...................string='foo.123.bar.456.baz'
use variables..................match_string, new_string, replacement
match string...................numbers (1 or more) (raw string)
replacement...................'#' 
print.........................new_string
#=>...........................foo.#.bar.#.baz
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\d+'
replacement='#'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string while scanning for 1 or more occurrence
of lowercase letters even if the letters are overlapping with another string
pattern, replacing the 1 or more occurrence with a single '(*)' pattern then
returning a new string with the new pattern:
	  
given string...................string='foo.123.bar.456.baz'
use variables..................match_string, new_string, replacement
match_string...................lowercase letters (1 or more)
replacement....................'(*)'
print..........................new_string
#=>............................(*).123.(*).456.(*)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='[a-z]+'
replacement='(*)'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string while scanning for single digits even
if the digits are overlapping with another string pattern and replacing each
digit with '#' then returning a new string with the new pattern:

given string...................string='foo.123.bar.456.baz'
use variables..................match_string, new_string, replacement
match_string...................single digit  (raw string)
replacement....................'#'
print..........................new_string
#=>............................#=> foo.###.bar.###.baz
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\d'
replacement='#'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string scanning for the occurrence of 1 or more
word characters even if they are overlapping with another string pattern and
capturing them in a group then scanning for the pattern 'bar,baz,' then scanning
for the occurrence of 1 or more word characters even if they are overlapping
with another string pattern capturing them in another group. a new string is then
returned with group 1 and group 2 swapped: 

given string.......................string='foo,bar,baz,qux'
use variables......................match_string, new_string, replacement
match_string.......................capture group word characters (1 or more)
                                   ,bar,baz
                                   ,capture group word characters (1 or more)
                                   (raw string)
replacement........................capture group 2,bar,baz,capture group 1
                                   (raw string)
print..............................new_string
#=>................................qux,bar,baz,foo
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'(\w+),bar,baz,(\w+)'
replacement=r'\2,bar,baz,\1'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string while scanning it after the string
pattern 'foo,' for 1 or more occurrences of a word string with a comma,
capturing it into a group named w1 even if the string pattern is overlapping
with another string pattern, then scanning for another 1 or more
occurrences of a word string with a comma capturing that in a group named
w2 even if that string pattern is overlapping then finally ending with the
string patten 'qux'. we then return a new string with the groups w1 and w2
swapped: 	  

given string.......................string='foo,bar,baz,qux'
use variables......................match_string, new_string, replacement,
                                   w1, w2
match_string.......................foo,capture named group 1
                                   ,capture named group 2,qux
								   (raw string)
replacement........................foo,capture group 2, capture group 1,qux
                                   (raw string)
print..............................new_string
#=>................................foo,baz,bar,qux
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'foo,(?P<w1>\w+),(P<w2>\w+),qux)
replacement=r,foo,\g<w2>,\g<w1>,qux'
new_string=re.sub(match_string,replacement,qux',string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string while scanning it after the string
pattern 'foo,' for 1 or more occurrences of word strings and a comma capturing,
that in a group even if the pattern is overlapping with another string pattern
then followed by another 1 or more occurrences of word strings and a comma,
capturing that in another group even if it is overlapping with another string
and finally ended by the string 'qux'. Then returning a new string where
group 1 and group 2 are swapped: 	  

given string..................string='foo,bar,baz,qux'
use variables.................match_string, new_string, replacement
match_string..................foo,word characters (1 or more),
                              word characters (1 or more),qux  
                              (raw string)
replacement...................foo,group 2,group 1,qux
                              (raw string)
print.........................new_string
#=>...........................foo,baz,bar,qux
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'foo,(\w+),(\w+),qux'
replacement=r'foo,\g<2>,\g<1>,qux'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string while scanning it for 1 or more
occurences of numbers even if the numbers are overlapping with another string
pattern. Capture the match in a group then use the group to add an additional
zero at the end of the matched string and place them inside the copy of the
original string then return the new string pattern:

given string...................string='foo 123 bar'
use variables..................match_string, new_string, replacement
match_string...................digits (1 or more) (raw string)
replacement....................group 1 0
print..........................new_string
#=>............................foo 1230 bar
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'(\d+)'
replacement=r'\g<1>0'
new_string=re.sub(match_string,replacement,string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to make a copy of a string scanning for 0 or more occurrences of the
letter 'x' and replacing it with the '-' character even if the string x' is
overlapping with another string pattern. Return the new string pattern:

given string...................string='foo'
use variables..................new_string, match_string, replacement
match_string...................'x' (0 or more occurrences)
replacement....................'-'
print..........................new_string
#=>............................-f-o-o-
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string='x*'
replacement='-'
new_string=re.sub(match_string, replacement, string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code that performs substitution by function. Scan for 1 or more 
occurrence of word characters separated by '.' dot, then use a function
to take the word and turn it into all caps if it consists of letter characters
or multiply it by 10 if it is all number characters. Create and return a new
string:

function.......................takes match_object
                               get group(0) and assign to single_string
                               if number return *10
                               if letters return as upper
hint...........................leave a space between function and program
given string...................string='foo.10.bar.20.baz.30'
use variables..................new_string, match_string, match_object,
                               single_string
use function...................replace
print..........................new_string
#=>............................Foo.100.BAR.200.BAZ.300
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
def replace(match_object):
  single_string=match_object.group(0)
  if single_string.isdigit():
    return str(int(single_string)*10)
  else:
    return single_string.upper()

import re
match_string=r'\w+'
new_string=re.sub(match_string, replace, string)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
how do we get 're.sub()' to perform at most a set amount of substitutions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
by using the count parameter
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
by using a flag
by using the + metacharacter
by using the * metacharacter
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.sub() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan through a string looking for a pattern match even if the
pattern is overlapping with another string then substitute the replacement
string with the match but limit the actual substitution done to no more than 2:

given string...................string='foo.bar.baz.qux'
use variables..................new_string, replacement, match_string
use parameter..................count
match_string...................word characters (1 or more occurrence)
                              (raw string)
replacement....................'xxx'
limit substitution to..........2
print..........................new_string
#=>............................xxx.xxx.baz.qux
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\w+'
replacement='xxx'
new_string=re.sub(match_string,replacement,string,count=2)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
#============================================================================================================================#
# re.subn() function ========================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.subn() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
how do we scan for a match in python regular expressions even if the match is
overlapping with another string pattern then substitute another string pattern
for the match limiting it to a certain number of substitutions then return both
the new string and the number of substitutions performed as a tuple?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
by using the re.subn() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
by using the re.sub() function
by using the re.replace() function
by using the re.change() function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.subn() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what does the 're.subn()' function return?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
a tuple with the new string and how many substitutions performed
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
a dictionary of all the substitutions performed
an integer stating all the substitutions performed
just the new string	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.subn() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
the 're.sub()' function and the 're.subn' functions perform very similarly
except how?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.subn() returns a tuple of the new string and the number of substitutions
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.sub() returns a tuple of number of substitutions and new string
re.subn() returns a new string
re.sub() returns original string	  
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.subn() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to scan for a match in python regular expressions even if the match
is overlapping with another string pattern then substitute another string
pattern but limit it to only two substitutions performed, returning a tuple
containing the new string and the number ofr substitutions performed:

given string..................'foo.bar.baz.qux'
use variables.................new_string, match_string, replacement
match_string..................word characters (1 or more occurrences)
                              (raw string)
replacement...................'xxx'
limit substitution to.........2
print.........................new_string
#=>...........................('xxx.xxx.baz.qux',2)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\w+'
replacement='xxx'
new_string=re.subn(match_string,replacement,string,count=2)
print(new_string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.subn() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.subn() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
substitution function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
searching function
utility function
formatting function
################################################################################
#============================================================================================================================#
# re.split() function =======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what can we use in python regular expressions to return a list of strings from 
a string that is delimited by a select group of characters?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.split()
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.separate()
re.break()
re.capture()
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.split() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
utility function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
searching function
substitution function
formatting function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using 're.split()' what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
it returns a list
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
it returns a match object
it returns a dictionary
it returns the original string
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using 're.split()' what goes inside the paretheses?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.split(<regex>,<string>,<maxsplit>,<flags>)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.split(<regex>,<string>,<count>,<flags>)
re.split(<regex>,<string>,<count>,<maxcount>)
re.split(<regex>,<string>,<list size>,<flags>)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using 're.split()' what does the maxsplit parameter do?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
limits the maximum split performed to the number given
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
limits the minimum split performed to the number given
limits the max number of items on the list to the number given
limits the minimum number of items on the list to the number given
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the maxsplit parameter in the 're.split() function what should we
know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
items that are left over is placed on the list as is
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
items that are left over is not placed on the list
items that are left over are also split
there will be no items left over
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to get a substring from the string as a list using the match 
pattern to check for delimiting characters:

given string...................string='foo,bar   ;   baz / qux'
use variables..................match_string, list
match_string...................space (0 or more occurrences)
                               comma, semicolon, forward slash
                               space (0 or more occurrences)
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
string='foo,bar   ;   baz / qux'
match_string=''\s*[,;/]\s*
list=re.split(match_string,string)
print(list)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using 're.split()' how do we capture the delimiting strings as well in
the returned list?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
by using capturing groups
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
by using maxsplit
by using flags
we can't capture delimiters
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to get a substring from the string as a list while capturing all 
of the delimiting characters as well:

given string.............string= 'foo,bar   ;   baz / qux'
use variables............list, match_string
match_string.............capture in a group:
                         items delimited by 1 or more space
                         comma, semicolon, forward slash
                         items delimited by 1 or more space
print....................list
#=>......................['foo', ',', 'bar', '   ;   ', 'baz', ' / ', 'qux']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##

      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
coding_test1
coding_test3
coding_test4  
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
import re
match_string='(\s*[,;/]\s*)'
list=re.split(match_string,string)
print(list)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to get a substring of the string where each character and space 
is an individual element in a list:

given string................string='foo, bar'
use variables...............list, match_string
match_string................find characters delimited by a space
                            (1 or more occurrences)
                            (raw string)
print.......................list
#=>.........................['', 'f', 'o', 'o', ',', '', 'b', 'a', 'r', '']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\s*'
list=re.split(match_string,string)
print(list)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to get a substring of the string where each character and space is
an individual element in a list and limit the number of times the operation is
performed to 3:

given string..................string='foo, bar'
use variables.................list, match_string
use parameter name............maxsplit
match_string..................find characters delimited by a space
                              (1 or more occurrences)
                              (raw string)
limit operations..............3
print.........................list
#=>...........................['', 'f', 'o', 'o, bar']
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
match_string=r'\s*'
list=re.split(match_string,string,maxsplit=3)
print(list)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.split() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using 're.split() what should we watch out for?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
if no match it returns the original string
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
if no match it returns a NULL
if no match it returns a False
if not match it returns a 0
################################################################################
#============================================================================================================================#
# re.escape() function ======================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.escape() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what can we use in python regular expressions to prevent the use of so many
back slashes in our regex?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.escape() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.noescape() function
re.nobackslash() function
re.backslash() function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.escape() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when using the 're.escape()' function what should we know?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
returns a are string with appropriate back slashes
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
returns the matching items
returns a copy of the original string
returns a reference to the string
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.escape() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code using 're.escape()' to create a search string in python regular
expressions:

given string.......string='foo^bar(baz)|qux'
use variables......escape_string, match_object
use a method.......that searches only on one line
print..............match_object
#=>................<re.Match object; span=(0, 16), match='foo^bar(baz)|qux'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
escape_string=re.escape('foo^bar(baz)|qux')
match_object=re.match(escape_string,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.escape() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.escape() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
utility function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
search function
substitution function
format function
################################################################################
#============================================================================================================================#
# re.compile() function =====================================================================================================#
#============================================================================================================================#
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what do we use to precompile a regular expression in python?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
re.precompile() function
compile() function
re.process() function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what category does re.compile() fall under in python regular expressions?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
utility function
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
search function
substitution function
format function
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
what format do we use when we are using the re.compile() function?
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
<variable>=re.compile(regex,flag)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
<variable>=re.compile(flag,regex)
re.comiple(regex,flag)=<variable>
(regex,flag).re.compile(<variable>)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code to compile a regular expression. Use a function that will scan
through a single and multiline string getting the first match even if the match
overlaps with another string pattern:

given string..................string='foo123bar'
use variables.................object, match_object
object........................decimal character (1 or more occurrences)
                              (raw string)
print.........................match_object
#=>...........................<re.Match object; span=(3, 6), match='123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
object=re.compile(r'\d+')
match_object=re.search(object,string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
when we use the re.compile() function to precompile a regular expression while
using the re.search() function, what other format can we use to get a match
object?

where 'object' is equal to….......................re.compile(r'\d+')
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
match_object=object.search(string)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
match_object=object.re.search(string)
match_object=search(object,string)
match_object=search(string,object)
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##
write code precompiling a regular expression. Use a function to search through
a single or multiline string for the first match even if it overlaps with
another string pattern. Use a different format other than 
variable=function(match_string,string):

given string...................string='foo123bar'
use variables..................match_object, object
match_object...................number (1 or more occurrences) (raw string)
print..........................match_object
#=>............................<re.Match object; span=(3, 6), match='123'>
      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##
import re
object=re.compile(r'\d+')
match_object=object.search(string)
print(match_object)
      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
coding_test1
################################################################################
################################################################################
      ##========================##
      ## DRILL NAME (ARRAYS)    ##
      ##========================##
regex	  
      ##========================##
      ## HEADER (GENERAL ARRAYS)##
      ##========================##
re.compile() function
      ##========================##
      ## QUESTION               ##
      ##......................................................................##
      ##========================##

      ##========================##
      ## ANSWER                 ##
      ##......................................................................##
      ##========================##

      ##========================##
      ## QUESTION TYPE          ##
      ##========================##
multiple_choice
coding_test1
coding_test3
coding_test4  
      ##========================##
      ## ANSWERS                ##
      ##......................................................................##
      ##========================##
	  
################################################################################